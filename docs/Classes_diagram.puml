@startuml
    ' Don't show icons near class names.
    hide circle
    ' Show attribute visibility as text (+, ~, #, -), not as icons.
    skinparam classAttributeIconSize 0

    class ReposMediator {
        <<set/get>> -searchTerm: string
        <<set/get>> -userIsSearching: boolean
        <<set/get>> -isInitialized: boolean
        <<get>> -isFetching: boolean
        <<get>> -error: Error
        <<set/get>> -requestSortBy: RequestSortBy
        <<set/get>> -sortBy: SortBy

        +itemsMap: Map<string, Repo>
        +items: Repo[]

        <<get>> -comparingItems: string[]

        ' searchTS
        +searchItems: Repo[]
        +nothingFound: boolean

        +services: Record<string, RepoService>
        <<Create>> +constructor()

        +addToComparison(repo: Repo): void
        +addToDetailedComparison(repoFullName: string): void
        +removeFromComparison(repo: Repo): void
        +removeFromDetailedComparison(repoFullName: string): void
        +setDetailedComparison(repoFullName: string): void

        +getRepoScore(repoFullName: string): number
    }
    note as N1
        <<set/get>> прототип обозначает методы get и set, соответствующие
        приватному полю с таким же названием, но с подчёркиванием вначале.
        Например, <<set/get>> -searchTerm означает:
            -_searchTerm: string
            +searchTerm(searchTerm: string): void
            +searchTerm(): string

        Аналогично с <<set>> и <<get>>, но уже лишь с одним аксессором:
        либо с set, либо с get методом соответственно.
    end note

    ' ReposMediator --> RepoMapper


    interface TransactionScript {
        +run(args)
    }

    interface RepoService {
        +add(repo: Repo): void
        +remove(repoFullName: string): void
    }
    ReposMediator -> RepoService

    ' class SetSearchParamTS {
    '     +defaultSearchParam: string

    '     +<<Create>> constructor(defaultSearchParam)
    '     +run(searchParam)
    ' }
    ' TransactionScript <|-- SetSearchParamTS

    ' class SetSearchResultsParamTS {
    '     +defaultSearchResultsParam: string

    '     +<<Create>> constructor(defaultSearchResultsParam)
    '     +run(searchResultsParam)
    ' }
    ' TransactionScript <|-- SetSearchResultsParamTS

    class LanguagesRepoService {
        +add(repo: Repo): void
        +remove(repoFullName: string): void
    }

    RepoService <|-- LanguagesRepoService
    ReposMediator --> LanguagesRepoService

    class SearchTS {
        +_isFetching: boolean
        +_isInitialized: boolean
        +_searchItems: Repo[]
        +_error: Error

        <<Create>> +constructor()
        +run(searchTerm: string, requestSortBy: RequestSortBy): Promise<Repo[]>
    }
    ReposMediator ----> SearchTS
    TransactionScript <|-- SearchTS

    class LanguagesTS {
        <<Create>> +constructor()
        +run(repo: Repo): void
    }
    TransactionScript <|-- LanguagesTS
    LanguagesRepoService o---> LanguagesTS

    class ContributorsRepoService {
        +add(repo: Repo): void
        +remove(repoFullName: string): void
    }
    ReposMediator --> ContributorsRepoService
    RepoService <|-- ContributorsRepoService

    class ContributorsTS {
        <<Create>> +constructor()
        +run(repo: Repo): void
    }
    TransactionScript <|-- ContributorsTS
    class AddContributorTS {
        <<Create>> +constructor()
        +run(repo: Repo, contributor: Contributor): Repo
    }
    ReposMediator ----> AddContributorTS
    TransactionScript <|-- AddContributorTS
    ContributorsRepoService o---> ContributorsTS

    class LanguagesStore {
        +getItemsFromApi(config: GetLanguagesRequestConfig): Promise<Languages>
        +processPayload(payload: Languages): void
    }
    ' Store <|-- StoreWithFetch
    ' StoreWithFetch <|- LanguagesStore
    ' StoreWithFetch <|- ContributorsStore

    LanguagesTS ---> LanguagesStore


    class ContributorsStore {
        +getItemsFromApi(config: GetContributorsRequestConfig): Promise<Contributors[]>
        +processPayload(payload: Languages): void
        +create(config: CreateContributorsConfig): Promise<Contributor>
    }

    ContributorsTS ---> ContributorsStore
    AddContributorTS ---> ContributorsStore
    AddContributorTS ---> RepoMapper

    LanguagesStore --> LanguagesMapper
    class LanguagesMapper {
        -GITHUB_TOKEN: string

        <<Create>> +constructor()
        +read(config: GetLanguagesRequestConfig): Promise<Languages>
    }

    SearchTS ---> RepoMapper
    class RepoMapper {
        -GITHUB_TOKEN: string

        <<Create>> +constructor()
        +read(searchTerm: string, sortBy: RequestSortBy): Promise<Repo[]>
        +update({ repoName, ownerName, data }: UpdateRepoRequestConfig): Promise<Repo>
    }
    RepoMapper --> DatabaseSearchRepo

    ContributorsStore --> ContributorsMapper
    class ContributorsMapper {
        -GITHUB_TOKEN: string

        <<Create>> +constructor()
        +read(config: GetContributorsRequestConfig): Promise<Contributor[]>
    }
    ContributorsMapper --> DatabaseRepoContributor

    class DatabaseRepoContributor {
        +id: number
        +login: string
        +contributions: number
        +avatar_url: string
    }
    DatabaseRepoContributor -left- DatabaseSearchRepo

    class DatabaseSearchRepo {
        +name: string
        +description: string
        +language: string
        +stargazers_count: number
        +forks_count: number
        +open_issues_count: number
        +watchers_count: number
        +score: number
        +owner.avatar_url: string
        +owner.login: string
        +created_at: Date
        +updated_at: Date
        +html_url: string

        +read(searchTerm: string, sortBy: string): RepoResponse[]
        +update(repoName: string, ownerName: string, data: Repo): RepoResponse
    }

    LanguagesMapper --> DatabaseRepoLanguage
    DatabaseRepoLanguage - DatabaseSearchRepo

    class DatabaseRepoLanguage {
        +name: string
        +usage: string
    }

@enduml
